{
	"uniforms": {
		"u_scale": 0.7,
		"u_layers": 7,
		"u_distortion": 7,
		"u_thickness": 0.0007,
		"u_slope": 43,
		"u_jitter": 1,
		"u_sharpness": 1,
		"u_color": [0.43, 0.43, 0.43],
		"u_resolution": [2048, 2048]
	},
	"fragmentShader": "// Fragment shader\n\n// Uniforms\nuniform vec2 u_resolution;\nuniform vec3 u_color;\nuniform float u_scale; \nuniform int u_layers; //min:1,max:8\nuniform float u_distortion; //min:0.5, max:8\nuniform float u_thickness; //min:0, max:0.25\nuniform float u_slope; //min:0, max:100\nuniform float u_jitter; //min:0.1,max:5\nuniform float u_sharpness; //min:0.1, max:1\n\n/* \n  Credit:\n\n  Author: [Fabrice Neyret](https://www.shadertoy.com/user/FabriceNeyret2),\n  Shadertoy: [Vorocracks](https://shadertoy.com/view/lsVyRy)\n  Shadertoy: [Vorocracks/Marble](https://www.shadertoy.com/view/Xd3fRN)\n*/\n\n#define VARIANT 1          // 1: amplifies Voronoi cell jittering\n#if VARIANT\n      float ofs = .5;          // jitter Voronoi centers in -ofs ... 1.+ofs\n#else\n      float ofs = 0.;\n#endif\n    \n//int FAULT = 1;                 // 0: crest 1: fault\n\nfloat RATIO = 1.,              // stone length/width ratio\n /*   STONE_slope = .3,        // 0.  .3  .3  -.3\n      STONE_height = 1.,       // 1.  1.  .6   .7\n      profile = 1.,            // z = height + slope * dist ^ prof\n */   \n      CRACK_profile = 0.1;      // fault vertical shape  1.  .2 \n    \n\n// std int hash, inspired from https://www.shadertoy.com/view/XlXcW4\nvec3 hash3( uvec3 x ) \n{\n#   define scramble  x = ( (x>>8U) ^ x.yzx ) * 1103515245U // GLIB-C const\n    scramble; scramble; scramble; \n    return vec3(x) / float(0xffffffffU) + 1e-30; // <- eps to fix a windows/angle bug\n}\n\n// === Voronoi =====================================================\n// --- Base Voronoi. inspired by https://www.shadertoy.com/view/MslGD8\n\n#define hash22(p)  fract( 18.5453 * sin( p * mat2(127.1,311.7,269.5,183.3)) )\n#define disp(p) ( -ofs + (1.+2.*ofs) * hash22(p) )\n\nvec3 voronoi( vec2 u )  // returns len + id\n{\n    vec2 iu = floor(u), v;\n\tfloat m = 1e9,d;\n#if VARIANT\n    for( int k=0; k < 25; k++ ) {\n        vec2  p = iu + vec2(k%5-2,k/5-2),\n#else\n    for( int k=0; k < 9; k++ ) {\n        vec2  p = iu + vec2(k%3-1,k/3-1),\n#endif\n            o = disp(p),\n      \t      r = p - u + o;\n\t\td = dot(r,r);\n        if( d < m ) m = d, v = r;\n    }\n\n    return vec3( sqrt(m), v+u );\n}\n\n// --- Voronoi distance to borders. inspired by https://www.shadertoy.com/view/ldl3W8\nvec3 voronoiB( vec2 u )  // returns len + id\n{\n    vec2 iu = floor(u), C, P;\n\tfloat m = 1e9,d;\n#if VARIANT\n    for( int k=0; k < 25; k++ ) {\n        vec2  p = iu + vec2(k%5-2,k/5-2),\n#else\n    for( int k=0; k < 9; k++ ) {\n        vec2  p = iu + vec2(k%3-1,k/3-1),\n#endif\n              o = disp(p),\n      \t      r = p - u + o;\n\t\td = dot(r,r);\n        if( d < m ) m = d, C = p-iu, P = r;\n    }\n\n    m = 1e9;\n    \n    for( int k=0; k < 25; k++ ) {\n        vec2 p = iu+C + vec2(k%5-2,k/5-2),\n\t\t     o = disp(p),\n             r = p-u + o;\n\n        if( dot(P-r,P-r)>1e-5 )\n        m = min( m, .5*dot( (P+r), normalize(r-P) ) );\n    }\n\n    return vec3( m, P+u );\n}\n\n// === pseudo Perlin noise =============================================\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\nint MOD = 1;  // type of Perlin noise\n    \n// --- 2D\n#define hash21(p) fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123)\nfloat noise2(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p); f = f*f*(3.-2.*f); // smoothstep\n\n    float v= mix( mix(hash21(i+vec2(0,0)),hash21(i+vec2(1,0)),f.x),\n                  mix(hash21(i+vec2(0,1)),hash21(i+vec2(1,1)),f.x), f.y);\n\treturn   MOD==0 ? v\n\t       : MOD==1 ? 2.*v-1.\n           : MOD==2 ? abs(2.*v-1.)\n                    : 1.-abs(2.*v-1.);\n}\n\nfloat fbm2(vec2 p) {\n    float v = 0.,  a = .5;\n    mat2 R = rot(.37);\n\n    for (int i = 0; i < 9; i++, p*=2.,a/=2.) \n        p *= R,\n        v += a * noise2(p);\n\n    return v;\n}\n#define noise22(p) vec2(noise2(p),noise2(p+17.7))\nvec2 fbm22(vec2 p) {\n    vec2 v = vec2(0);\n    float a = .5;\n    mat2 R = rot(.37);\n\n    for (int i = 0; i < 6; i++, p*=2.,a/=2.) \n        p *= R,\n        v += a * noise22(p);\n\n    return v;\n}\nvec2 mfbm22(vec2 p) {  // multifractal fbm \n    vec2 v = vec2(1);\n    float a = .5;\n    mat2 R = rot(.37);\n\n    for (int i = 0; i < 6; i++, p*=2.,a/=2.) \n        p *= R,\n          v += v * a * noise22(p);\n\n    return v-1.;\n}\n\nvoid main(){\n  vec2 U = gl_FragCoord.xy;\n  vec4 O = vec4(0.);\n  U *= (.5 + 1.- (u_scale*1.));\n  \n    U *= 4./u_resolution.y;\n    vec2 I = floor(U/2.); \n    bool vert = mod(I.x+I.y,2.)==0.; //if (vert) U = U.yx;\n    vec3 H0;\n    O-=O;\n\n    for(int i=0; i<u_layers; i++) {\n        vec2 V =  U / vec2(RATIO,1),                  \n             D = u_distortion * fbm22(U/u_jitter) * u_jitter;\n        vec3  H = voronoiB( V + D ); if (i==0) H0=H;\n        float d = H.x;                                \n        d = min( 1., u_slope * pow(max(0.,d-u_thickness),u_sharpness) );\n  \n        O += vec4(1.-d) / exp2(float(i));\n        U *= 1.5 * rot(.37);\n    }\n    \n    gl_FragColor = vec4(u_color, O);\n\n}",
	"vertexShader": "// Vertex shader\n\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"
}
